/**
 This Gradle file exists primarily to run package.json scripts on Jenkins workers. Gradle effectively provides a
 project-specific install of NodeJS and NPM.

 On dev machines, it is expected that NodeJS and NPM are managed by the developer by a tool such as NVM. Though a
 developer may choose to use these Gradle tasks instead.
 */

plugins {
    id "com.dorongold.task-tree" version "1.3.1"
    id "com.moowork.node" version "1.2.0"
}

node {
    version = "12.12.0"
    npmVersion = "6.12.0"
    download = true
    nodeModulesDir = file("${project.projectDir}")
}

wrapper {
    gradleVersion "5.6.2"
    distributionType Wrapper.DistributionType.BIN
}

ext {
    // Default version bump performed by `version` task. Can be overriden by commandline `-Pbump` flag.
    bump = project.properties["bump"] ?: "patch"

    // Default scope filter that can be applied to any `lerna run` command. Can be overriden by commandline `-Pscope` flag.
    scope = project.properties["scope"] ?: ""

    ignoreScope = project.properties["ignoreScope"] ?: ""
}

task installDeps(type: NpmTask) {
    args = "ci".tokenize()
}

task build(type: NpmTask) {
    args = "run build".tokenize()
}

task changedScopes(type: NpmTask) {
    args = "run changedScopes".tokenize()
}

task lint(type: NpmTask) {
    args = "run lint".tokenize()
}

task publishArtifact(type: NpmTask) {
    args = "run publishArtifact -- ${scope} ${ignoreScope}".tokenize()
}

task setup(type: NpmTask) {
    dependsOn installDeps

    args = "run setup".tokenize()
}

task test(type: NpmTask) {
    args = "run test".tokenize()
}

task typeCheck(type: NpmTask) {
    args = "run typeCheck".tokenize()
}

/**
 * Like others in this file, this task is only intended to be run in CI.
 * It takes a `-Pbump` commandline arg, and defaults to "patch," as defined in `ext`. The options available are the
 * same as the {bump} positional arg to `lerna version`.
 */
task version(type: NpmTask) {
    args = "run lernaVersion -- ${bump}".tokenize()
}
